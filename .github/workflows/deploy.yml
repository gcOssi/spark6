name: Deploy Staging

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_TO_ASSUME: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

  FE_REPO: ${{ vars.ECR_REPO_FE }}
  BE_REPO: ${{ vars.ECR_REPO_BE }}
  FE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}
  FE_NGINX_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}-nginx
  BE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_BE }}

  # Backend remoto de Terraform (define estos en Environment "staging")
  TF_BACKEND_BUCKET: ${{ secrets.AWS_ACCOUNT_ID }}-${{ vars.GH_REPO }}-staging
  TF_BACKEND_KEY: ${{ vars.GH_REPO }}/staging/terraform.tfstate 
  TF_BACKEND_DDB_TABLE: tf-locks-${{ vars.GH_REPO }}-staging

  # Variables Terraform (incluye las del backend para la policy IAM)
  TF_VAR_gh_owner: ${{ vars.GH_OWNER }}
  TF_VAR_gh_repo:  ${{ vars.GH_REPO }}
  TF_VAR_name_prefix: staging
  TF_VAR_tf_backend_bucket: ${{ vars.TF_BACKEND_BUCKET }}
  TF_VAR_tf_backend_ddb_table: ${{ vars.TF_BACKEND_DDB_TABLE }}

jobs:
  deploy:
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: ./infrastructure
        shell: bash
        run: |
          set -euo pipefail

          echo "Checking if remote state object exists in S3..."
          if aws s3api head-object --bucket "${TF_BACKEND_BUCKET}" --key "${TF_BACKEND_KEY}" >/dev/null 2>&1; then
            echo "Remote state FOUND → using -reconfigure"
            INIT_FLAGS="-reconfigure"
          else
            if [ -f "terraform.tfstate" ]; then
              echo "Local state FOUND and remote state MISSING → using -migrate-state"
              INIT_FLAGS="-migrate-state"
            else
              echo "No local state and no remote state → plain init (no special flags)"
              INIT_FLAGS=""
            fi
          fi

          terraform init -input=false ${INIT_FLAGS} \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB_TABLE}" \
            -backend-config="encrypt=true"

      - name: Import IAM role if it already exists
        working-directory: ./infrastructure
        shell: bash
        run: |
          set -euo pipefail
          ROLE_NAME="staging-github-oidc"
          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            if ! terraform state show aws_iam_role.staging-dashboard-gha >/dev/null 2>&1; then
              terraform import aws_iam_role.staging-dashboard-gha "$ROLE_NAME"
            fi
          fi
                  
      - name: Terraform Apply
        working-directory: ./infrastructure
        run: terraform apply -auto-approve -input=false

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repositories exist
        shell: bash
        run: |
          set -euo pipefail
          for r in "${FE_REPO}" "${BE_REPO}" "${FE_REPO}-nginx"; do
            aws ecr describe-repositories --repository-names "$r" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$r" >/dev/null
          done

      - name: Build & Push Frontend
        working-directory: ./frontend
        run: |
          docker build -t "$FE_IMAGE:latest" .
          docker push "$FE_IMAGE:latest"

      - name: Build & Push Backend
        working-directory: ./backend
        run: |
          docker build -t "$BE_IMAGE:latest" .
          docker push "$BE_IMAGE:latest"

      - name: Terraform Apply (roll services to latest)
        working-directory: ./infrastructure
        run: terraform apply -auto-approve -input=false

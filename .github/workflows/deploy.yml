name: Deploy to ECS (staging)

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/deploy-ecs-staging.yml'
  workflow_dispatch:

permissions:
  id-token: write   # for GitHub OIDC
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: staging-dashboard
  CLUSTER_NAME: ${{ env.PROJECT_NAME }}-cluster
  SERVICE_NAME: ${{ env.PROJECT_NAME }}-svc
  IMAGE_TAG: ${{ github.sha }}
  # Repos ECR se forman con la cuenta + regiÃ³n + project_name
  ECR_FRONTEND: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-frontend
  ECR_BACKEND:  ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push BACKEND (linux/amd64)
        run: |
          docker build \
            --platform linux/amd64 \
            -t "$ECR_BACKEND:$IMAGE_TAG" \
            -t "$ECR_BACKEND:latest" \
            ./backend
          docker push "$ECR_BACKEND:$IMAGE_TAG"
          docker push "$ECR_BACKEND:latest"

      - name: Build & Push FRONTEND (linux/amd64)
        env:
          REACT_APP_API_URL: /api
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg REACT_APP_API_URL=$REACT_APP_API_URL \
            -t "$ECR_FRONTEND:$IMAGE_TAG" \
            -t "$ECR_FRONTEND:latest" \
            ./frontend
          docker push "$ECR_FRONTEND:$IMAGE_TAG"
          docker push "$ECR_FRONTEND:latest"

      - name: Prepare new task definition with updated images
        id: taskdef
        shell: bash
        run: |
          FAMILY="${PROJECT_NAME}-task"
          aws ecs describe-task-definition \
            --task-definition "$FAMILY" \
            --query taskDefinition > td.json

          # Sustituye imagenes por tag del commit manteniendo el resto intacto
          cat td.json | jq \
            --arg fe "$ECR_FRONTEND:$IMAGE_TAG" \
            --arg be "$ECR_BACKEND:$IMAGE_TAG" \
            '(.containerDefinitions[] | select(.name=="frontend").image) |= $fe |
             (.containerDefinitions[] | select(.name=="backend").image)  |= $be |
             del(.revision, .status, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            > td-new.json

          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://td-new.json \
            --query taskDefinition.taskDefinitionArn \
            --output text)

          echo "NEW_TD_ARN=$NEW_TD_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service to new task definition
        run: |
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --task-definition "${{ steps.taskdef.outputs.NEW_TD_ARN }}"

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME"

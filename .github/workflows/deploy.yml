name: Deploy Staging

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_TO_ASSUME: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

  FE_REPO: ${{ vars.ECR_REPO_FE }}
  BE_REPO: ${{ vars.ECR_REPO_BE }}
  FE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}
  FE_NGINX_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_FE }}-nginx
  BE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_BE }}

  # Variables Terraform (incluye las del backend para la policy IAM)
  TF_VAR_git_owner: ${{ vars.GH_OWNER }}
  TF_VAR_git_repo:  ${{ vars.GH_REPO }}
  TF_VAR_name_prefix: staging

jobs:
  deploy:
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: ./infrastructure
        shell: bash
        run: |
          set -euo pipefail

          terraform init -input=false

      - name: Import IAM role if it already exists
        working-directory: ./infrastructure
        shell: bash
        run: |
          set -euo pipefail
          ROLE_NAME="staging-dashboard-gha"
          ADDR="aws_iam_role.gha_deploy_role"

          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            if ! terraform state show "$ADDR" >/dev/null 2>&1; then
              echo "Importando IAM role existente $ROLE_NAME en Terraform state..."
              terraform import "$ADDR" "$ROLE_NAME"
            else
              echo "IAM role ya está en el state, no es necesario importar."
            fi
          else
            echo "IAM role $ROLE_NAME no existe en AWS, Terraform lo creará en apply."
          fi
                  
      - name: Terraform Apply
        working-directory: ./infrastructure
        env:
          TF_VAR_git_owner: ${{ vars.GH_OWNER }}
          TF_VAR_git_repo: ${{ vars.GH_REPO }}
        run: terraform apply -auto-approve -input=false

      - name: Export API URL from Terraform
        working-directory: ./infrastructure
        run: echo "REACT_APP_API_URL=$(terraform output -raw cloudfront_domain)" >> $GITHUB_ENV

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repositories exist
        shell: bash
        run: |
          set -euo pipefail
          for r in "${FE_REPO}" "${BE_REPO}" "${FE_REPO}-nginx"; do
            aws ecr describe-repositories --repository-names "$r" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$r" >/dev/null
          done

      - name: Docker build frontend
        working-directory: ./frontend
        run: |
          docker build \
            --build-arg REACT_APP_API_URL="${{ steps.tfout.outputs.api_url }}" \
            -t $FE_IMAGE:latest .
          docker push "$FE_IMAGE:latest"

      - name: Build & Push Backend
        working-directory: ./backend
        run: |
          docker build -t "$BE_IMAGE:latest" .
          docker push "$BE_IMAGE:latest"

      - name: Terraform Apply (roll services to latest)
        working-directory: ./infrastructure
        run: terraform apply -auto-approve -input=false
